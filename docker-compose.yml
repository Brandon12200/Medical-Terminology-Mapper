services:
  # Redis for Celery task queue and caching
  redis:
    image: redis:7-alpine
    container_name: medical-mapper-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medical-mapper-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app:/app/app
      - ./backend/api:/app/api
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_exports:/app/exports
      - backend_cache:/app/cache
      - backend_models:/app/models
    environment:
      - API_ENV=development
      - DB_PATH=/app/data/terminology
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: python -m uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped

  # Celery worker for background processing
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medical-mapper-celery
    command: celery -A celery_config worker --loglevel=info --concurrency=2
    volumes:
      - ./backend/app:/app/app
      - ./backend/api:/app/api
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_exports:/app/exports
      - backend_cache:/app/cache
      - backend_models:/app/models
    environment:
      - API_ENV=development
      - DB_PATH=/app/data/terminology
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped

  # Celery Flower for monitoring
  celery-flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medical-mapper-flower
    command: celery -A celery_config flower --port=5555
    ports:
      - "5555:5555"
    volumes:
      - ./backend/app:/app/app
      - ./backend/api:/app/api
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: medical-mapper-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    environment:
      - VITE_API_URL=http://localhost:8000/api/v1
    depends_on:
      - api
    command: npm run dev -- --host 0.0.0.0 --port 3000
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_exports:
    driver: local
  backend_cache:
    driver: local
  backend_models:
    driver: local

networks:
  default:
    name: medical-mapper-network
    driver: bridge